; uniforms
.fvec projection[4], modelView[4]
.fvec lightVec

; constants
.constf ones(1.0, 1.0, 1.0, 1.0)
.constf zeros(0.0, 0.0, 0.0, 0.0)
.constf ambientLight(0.125, 0.2, 0.225, 1.0)

; outputs
.out outpos position
.out outtc0 texcoord0
.out outclr color

; input aliases
.alias inpos v0
.alias intex v1
.alias innrm v2

.proc main
	; move inpos to a register
	; and force the w component to be 1.0
	mov r0.xyz, inpos
	mov r0.w,   ones

	; r1 = modelView * inpos
	dp4 r1.x, modelView[0], r0
	dp4 r1.y, modelView[1], r0
	dp4 r1.z, modelView[2], r0
	dp4 r1.w, modelView[3], r0

	; outpos = projection * r1
	dp4 outpos.x, projection[0], r1
	dp4 outpos.y, projection[1], r1
	dp4 outpos.z, projection[2], r1
	dp4 outpos.w, projection[3], r1

	; outtex = intex
	mov outtc0, intex

	; Transform the normal vector with the modelView matrix
	; r1 = normalize(modelView * innrm)
	mov r0.xyz, innrm
	mov r0.w,   zeros
	dp4 r1.x,   modelView[0], r0
	dp4 r1.y,   modelView[1], r0
	dp4 r1.z,   modelView[2], r0
	mov r1.w,   zeros
	dp3 r2,     r1, r1 ; r2 = x^2+y^2+z^2 for each component
	rsq r2,     r2     ; r2 = 1/sqrt(r2)  ''
	mul r1,     r2, r1 ; r1 = r1*r2

	; Calculate the diffuse level
	; r0.xyz = max(0, -lightVec * r1)
	dp3 r0.xyz, -lightVec, r1
	max r0,     zeros,     r0
	mov r0.w,   ones

	; outclr = min(diffuse + ambient, 1)
	add r1, ambientLight, r0
	min outclr, ones, r1

	end
.end
